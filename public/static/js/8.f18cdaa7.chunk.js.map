{"version":3,"sources":["env/index.js","env/dev.env.js","api/index.js","env/prod.env.js","service/request.js","components/Editor/index.js","pages/demo/index.js","redux/actions/button.js"],"names":["module","exports","require","BASE_API","ENTERPRISE","PLATFORM","projectName","API","base","env","login","register","new","details","tip","msg","error","toLogin","console","log","axios","create","timeout","defaults","baseURL","headers","post","interceptors","request","use","config","token","localStorage","getItem","Promise","response","res","status","resolve","reject","other","removeItem","setTimeout","errorHandle","data","message","get","url","params","then","catch","err","del","delete","EDITOR_IMAGE_UPLOADER","Editor","props","initEditor","editor","E","toolbarCls","contentCls","customConfig","zIndex","onfocus","contentEle","document","querySelector","style","minHeight","height","onblur","menus","controls","onchange","html","onChange","placeholder","onchangeTimeout","uploadImgServer","uploadImgMaxLength","uploadFileName","uploadImgHooks","customInsert","insertImg","result","files","pasteTextHandle","content","indexOf","contentElement","setHtml","getHtml","txt","getText","text","this","toolbarClassName","contentClassName","Fragment","className","Component","defaultProps","openNotification","type","title","description","Demo","buttonClick","setButton","buttonInfo","button","username","password","setSate","roles","editorChange","value","state","onClick","React","connect","dispatch","num","scope","BUTTONCLICK","payload"],"mappings":"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","file":"static/js/8.f18cdaa7.chunk.js","sourcesContent":["\r\n// eslint-disable-next-line default-case\r\nswitch (process.env.NODE_ENV) {\r\n  case 'development':\r\n    module.exports = require('./dev.env')\r\n    break\r\n  case 'production':\r\n    module.exports = require('./prod.env')\r\n    break\r\n  default:\r\n    module.exports = require('./dev.env')\r\n}\r\n\r\n\r\n","module.exports = {\r\n  BASE_API: 'http://192.168.1.117:3000',\r\n  ENTERPRISE: 'xxx',\r\n  PLATFORM: 'xxx',\r\n  projectName: 'development'\r\n};","/**\r\n * 接口地址\r\n */\r\nimport env from '../env'\r\nconst API = {\r\n  base: env.BASE_API,\r\n  // 业务类\r\n  // 登录页面\r\n  login: {\r\n    login: () => `/admin/admin_login`,\r\n    register: () => `/admin/user_register`\r\n  },\r\n  //新闻相关\r\n  new: {\r\n    details: () => `/news/get`\r\n  }\r\n};\r\n\r\nexport default API;","module.exports = {\r\n  BASE_API: \"http://192.168.1.117:3000\",\r\n  ENTERPRISE: \"xxx\",\r\n  PLATFORM: \"xxx\",\r\n  projectName: \"production\"\r\n};\r\n","/* eslint-disable import/first */\r\nimport axios from 'axios';\r\nconst API = require('../env');\r\nimport { message } from 'antd';\r\n/**\r\n  * 提示函数\r\n  * \r\n  */\r\nconst tip = msg => {\r\n    message.error(msg);\r\n};\r\n\r\n/**\r\n  * 跳转登录页\r\n  * 携带当前页面路由，以期在登录页面完成登录后返回当前页面\r\n  */\r\nconst toLogin = () => {\r\n    console.log('到登录页')\r\n}\r\n\r\n/**\r\n  * 请求失败后的错误统一处理\r\n  * @param {Number} status 请求失败的状态码\r\n  */\r\nconst errorHandle = (status, other) => {\r\n    // 状态码判断\r\n    switch (status) {\r\n        // 401: 未登录状态，跳转登录页\r\n        case 401:\r\n            toLogin();\r\n            break;\r\n        // 403 token过期\r\n        // 清除token并跳转登录页\r\n        case 403:\r\n            tip(\"登录过期，请重新登录\");\r\n            localStorage.removeItem(\"x_token\");\r\n            setTimeout(() => {\r\n                toLogin();\r\n            }, 1000);\r\n            break;\r\n        // 404请求不存在\r\n        case 404:\r\n            tip(\"请求的资源不存在\");\r\n            break;\r\n        //500\r\n        case 500:\r\n            tip(\"服务器异常\");\r\n            break;\r\n        default:\r\n            console.log(other);\r\n    }\r\n}\r\n\r\n// 创建axios实例\r\naxios.create({\r\n    timeout: 5000\r\n});\r\n//配置开发和生产环境baseURL\r\naxios.defaults.baseURL = API.BASE_API;\r\n// 设置post请求头\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n    \"application/x-www-form-urlencoded\";\r\n/**\r\n  * 请求拦截器\r\n  * 每次请求前，如果存在token则在请求头中携带token\r\n  */\r\naxios.interceptors.request.use(\r\n    config => {\r\n        // 登录流程控制中，根据本地是否存在token判断用户的登录情况\r\n        const token = localStorage.getItem(\"x_token\");\r\n        //token && (config.headers.Authorization = token);\r\n        token && (config.headers[\"X-Token\"] = token);\r\n        return config;\r\n    },\r\n    error => Promise.error(error)\r\n);\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n    // 请求成功\r\n    res => (res.status === 200 ? Promise.resolve(res) : Promise.reject(res)),\r\n    // 请求失败\r\n    error => {\r\n        const { response } = error;\r\n        if (response) {\r\n            // 请求已发出，但是不在2xx的范围\r\n            errorHandle(response.status, response.data.message);\r\n            return Promise.reject(response);\r\n        } else {\r\n            // 处理断网的情况\r\n            //toLogin();\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * 封装get方法\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\n\r\nexport const get = (url, params = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, {\r\n            params: params\r\n        })\r\n            .then(response => {\r\n                resolve(response.data);\r\n            })\r\n            .catch(err => {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * 封装post请求\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\n\r\nexport const post = (url, data = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url, data)\r\n            .then(response => {\r\n                resolve(response.data);\r\n            }, err => {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\n/**\r\n* 封装patch请求\r\n* @param url\r\n* @param data\r\n* @returns {Promise}\r\n*/\r\n\r\nexport const patch = (url, data = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.patch(url, data)\r\n            .then(response => {\r\n                resolve(response);\r\n            }, err => {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\n/**\r\n* 封装put请求\r\n* @param url\r\n* @param data\r\n* @returns {Promise}\r\n*/\r\n\r\nexport const put = (url, data = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.put(url, data)\r\n            .then(response => {\r\n                resolve(response.data);\r\n            }, err => {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\n/**\r\n* 封装delete请求\r\n* @param url\r\n* @param data\r\n* @returns {Promise}\r\n*/\r\n\r\nexport const del = (url, params = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n        axios.delete(url, {\r\n            params: params\r\n        })\r\n            .then(response => {\r\n                resolve(response.data);\r\n            })\r\n            .catch(err => {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport E from \"wangeditor\";\r\nimport env from \"../../env\"\r\n\r\nimport \"./index.less\";\r\n\r\nconst EDITOR_IMAGE_UPLOADER = `${env.BASE_API}/news/upload`;\r\nconst DEFAULT_TOOLBAR_CLASS = \"cl_editor_toolbar_default\";\r\nconst DEFAULT_CONTENT_CLASS = \"cl_editor_content_default\";\r\n\r\nclass Editor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.editor = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initEditor()\r\n    //赋值延迟处理\r\n    setTimeout(() => {\r\n        if (this.props.contentElement) {\r\n          this.setHtml(this.props.contentElement)\r\n          if (this.props.onChange) {\r\n            this.props.onChange(this.props.contentElement);\r\n          }\r\n        } else {\r\n          this.setHtml(`<p>${this.props.placeholder}</p>`)\r\n        }\r\n      }, 1000)\r\n  }\r\n \r\n  initEditor = () => {\r\n    this.editor = new E(\r\n      `.${this.props.toolbarCls}`,\r\n      `.${this.props.contentCls}`\r\n    );\r\n\r\n    // 配置编辑区域的 z-index\r\n    this.editor.customConfig.zIndex = 10;\r\n    // focus & blur\r\n    this.editor.customConfig.onfocus = () => {\r\n      const contentEle = document.querySelector(`.${this.props.contentCls}`);\r\n      contentEle.style.minHeight = \"300px\";\r\n      contentEle.style.height = \"auto\";\r\n    };\r\n\r\n    this.editor.customConfig.onblur = () => {\r\n      const contentEle = document.querySelector(`.${this.props.contentCls}`);\r\n      contentEle.style.height = \"300px\";\r\n    };\r\n\r\n    // 配置菜单\r\n    this.editor.customConfig.menus = this.props.controls;\r\n\r\n    this.editor.customConfig.onchange = html => {\r\n      // html 即变化之后的内容\r\n      if (this.props.onChange) {\r\n        if (html !== `<p>${this.props.placeholder}</p>`){\r\n          if (html === `<p><br></p>`){\r\n              this.props.onChange('');\r\n            }else{\r\n              this.props.onChange(html);\r\n            }\r\n            \r\n          }    \r\n      }\r\n    };\r\n    this.editor.customConfig.onchangeTimeout = 300; // onchange 触发的延迟时间\r\n\r\n    // 上传\r\n    this.editor.customConfig.uploadImgServer = EDITOR_IMAGE_UPLOADER;\r\n    this.editor.customConfig.uploadImgMaxLength = 5; // 一次最多上传5张图片\r\n    // this.editor.customConfig.uploadImgParams = {\r\n    //   access_token: window.localStorage.getItem(\"token\")\r\n    // };\r\n    this.editor.customConfig.uploadFileName = \"files\";\r\n    this.editor.customConfig.uploadImgHooks = {\r\n      customInsert: function(insertImg, result) {\r\n        const imgs = result.data.files;\r\n        insertImg(imgs);\r\n      }\r\n    };\r\n\r\n    // 对于word粘贴的文本做操作\r\n    this.editor.customConfig.pasteTextHandle = function(content) {\r\n      if (\r\n        ~content.indexOf(\"<!--[if gte mso 9]><xml>\") ||\r\n        ~content.indexOf(\"<spanyes\")\r\n      ) {\r\n        return \"粘贴内容有乱码，请使用ctrl+shift+v来粘贴内容(mac请使用command+shift+v)\";\r\n      } else {\r\n        return content;\r\n      }\r\n    };\r\n\r\n    // 初始化内容\r\n    this.editor.create();\r\n    //默认有值和无值情况处理\r\n    if (this.props.contentElement){\r\n      this.setHtml(this.props.contentElement)\r\n      if (this.props.onChange) {\r\n        this.props.onChange(this.props.contentElement);\r\n      }\r\n    }else{\r\n      this.setHtml(`<p>${this.props.placeholder}</p>`)\r\n    }\r\n   \r\n  };\r\n\r\n  getHtml = () => this.editor.txt.html();\r\n\r\n  getText = () => this.editor.txt.text();\r\n\r\n  setHtml = html => this.editor.txt.html(html);\r\n\r\n  render() {\r\n    const toolbarClassName = this.props.toolbarCls\r\n      ? `${this.props.toolbarCls} cl_editor_toolbar`\r\n      : `${DEFAULT_TOOLBAR_CLASS} cl_editor_toolbar`;\r\n    const contentClassName = this.props.contentCls\r\n      ? `${this.props.contentCls} cl_editor_content`\r\n      : `${DEFAULT_CONTENT_CLASS} cl_editor_content`;\r\n    return (\r\n      <React.Fragment>\r\n        <div className={toolbarClassName} />\r\n        <div className={contentClassName} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nEditor.defaultProps = {\r\n  controls: [\r\n    \"head\", // 标题\r\n    \"bold\", // 粗体\r\n    \"fontSize\", // 字号\r\n    \"fontName\", // 字体\r\n    \"italic\", // 斜体\r\n    \"underline\", // 下划线\r\n    \"strikeThrough\", // 删除线\r\n    \"foreColor\", // 文字颜色\r\n    \"backColor\", // 背景颜色\r\n    \"link\", // 插入链接\r\n    \"list\", // 列表\r\n    \"justify\", // 对齐方式\r\n    \"quote\", // 引用\r\n    \"emoticon\", // 表情\r\n    \"image\", // 插入图片\r\n    \"table\", // 表格\r\n    //\"video\", // 插入视频\r\n    \"code\", // 插入代码\r\n    \"undo\", // 撤销\r\n    \"redo\" // 重复\r\n  ],\r\n  placeholder: \"内容编辑区域\",\r\n  toolbarCls: DEFAULT_TOOLBAR_CLASS,\r\n  contentCls: DEFAULT_CONTENT_CLASS\r\n};\r\n\r\nEditor.propTypes = {\r\n  controls: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  toolbarCls: PropTypes.string,\r\n  contentCls: PropTypes.string\r\n};\r\n\r\nexport default Editor;\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setButton } from '../../redux/actions/button'\r\nimport './index.less'\r\nimport { Button, Input, notification } from 'antd'\r\nimport API from '../../api'\r\nimport {post} from '../../service/request'\r\nimport Editor from '../../components/Editor'\r\n\r\nconst mapStateToProps = state => ({\r\n    buttonInfo: state\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setButton: num => dispatch(setButton(num))\r\n})\r\n\r\nconst openNotification = (type, msg, title ) => {\r\n    notification[type]({\r\n        message: title || type,\r\n        description: msg\r\n    });\r\n}\r\n\r\nclass Demo extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            roles:[],\r\n            content:'默认赋值'\r\n        }\r\n    }\r\n    buttonClick = () => {\r\n        this.props.setButton(this.props.buttonInfo.button)\r\n    }\r\n\r\n    login=()=>{\r\n        const postData={\r\n            username: \"root\",\r\n            password: \"123\"\r\n        }\r\n\r\n        post(API.login.login(), postData).then(res =>{\r\n               console.log(res)\r\n            if (res.status === 1){\r\n                openNotification('success', res.message)\r\n                this.setSate = ({\r\n                    roles: res.data.roles\r\n                })\r\n            }else{\r\n                openNotification('error', res.message)\r\n            }\r\n           \r\n        })\r\n    }\r\n\r\n    editorChange=(value)=>{\r\n        console.log('value', value)\r\n    }\r\n     render(){\r\n         return (\r\n             <div className=\"page demo\">\r\n                 <div className=\"demo_head\"></div> \r\n                 <div className=\"demo_body\">\r\n                     <h3>redux使用方法</h3>\r\n                     <Button type=\"danger\" onClick={this.buttonClick}>按钮</Button>\r\n                     <Input value={this.props.buttonInfo.button} />\r\n                     <h3>接口请求方式</h3>\r\n                     <Button type=\"primary\" onClick={this.login}>登录调接口</Button>\r\n                     <h3>富文本</h3>\r\n                     <Editor\r\n                         onChange={this.editorChange}\r\n                         contentElement={this.state.content ? this.state.content : ''}\r\n                         placeholder=\"请在这里输入文章正文，包括文字、图片、视频等\"\r\n                     />\r\n                 </div>\r\n             </div>\r\n         )\r\n     }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Demo)","import { BUTTONCLICK } from '../constants'\r\n\r\nexport const setButton = scope => {\r\n    return {\r\n        type: BUTTONCLICK,\r\n        payload: {\r\n            scope\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}